package transformer;

import json.couchdb.FileReport;
import json.couchdb.Scan;
import json.couchdb.ScanRequest;

import java.util.Map;
import java.util.stream.Collectors;

public class CouchDbTransformer {

    /* To JSON */

    public FileReport transformFileReport(model.FileReport fileReport) {
        return new FileReport(
                transformScans(fileReport.getScans()),
                fileReport.getScanId(),
                fileReport.getSha1(),
                fileReport.getResource(),
                fileReport.getResponseCode(),
                fileReport.getScanDate(),
                fileReport.getPermalink(),
                fileReport.getVerboseMessage(),
                fileReport.getTotal(),
                fileReport.getPositives(),
                fileReport.getSha256(),
                fileReport.getMd5()
        );
    }

    private Scan transformScan(model.Scan scan) {
        return new Scan(
                scan.isDetected(),
                scan.getVersion(),
                scan.getResult(),
                scan.getUpdate()
        );
    }

    private Map<String, Scan> transformScans(Map<String, model.Scan> scans) {
        if (scans == null) return null;
        return scans.entrySet()
                .stream()
                .collect(Collectors.toMap(
                        Map.Entry::getKey,
                        e -> transformScan(e.getValue())
                ));
    }

    public ScanRequest transformScanRequest(model.ScanRequest scanRequest) {
        return new ScanRequest(
                scanRequest.getResponseCode(),
                scanRequest.getVerboseMessage(),
                scanRequest.getResource(),
                scanRequest.getScanId(),
                scanRequest.getPermalink(),
                scanRequest.getSha256(),
                scanRequest.getSha1(),
                scanRequest.getMd5()
        );
    }

    /* From JSON */

    public model.FileReport transformFileReport(FileReport fileReport) {
        return new model.FileReport(
                transformScansFromJson(fileReport.getScans()),
                fileReport.getScanId(),
                fileReport.getSha1(),
                fileReport.getResource(),
                fileReport.getResponseCode(),
                fileReport.getScanDate(),
                fileReport.getPermalink(),
                fileReport.getVerboseMessage(),
                fileReport.getTotal(),
                fileReport.getPositives(),
                fileReport.getSha256(),
                fileReport.getMd5()
        );
    }

    private model.Scan transformScan(Scan scan) {
        return new model.Scan(
                scan.isDetected(),
                scan.getVersion(),
                scan.getResult(),
                scan.getUpdate()
        );
    }

    private Map<String, model.Scan> transformScansFromJson(Map<String, Scan> scans) {
        if (scans == null) return null;
        return scans.entrySet()
                .stream()
                .collect(Collectors.toMap(
                        Map.Entry::getKey,
                        e -> transformScan(e.getValue())
                ));
    }

    public model.ScanRequest transformScanRequest(ScanRequest scanRequest) {
        return new model.ScanRequest(
                scanRequest.getResponseCode(),
                scanRequest.getVerboseMessage(),
                scanRequest.getResource(),
                scanRequest.getScanId(),
                scanRequest.getPermalink(),
                scanRequest.getSha256(),
                scanRequest.getSha1(),
                scanRequest.getMd5()
        );
    }

}
