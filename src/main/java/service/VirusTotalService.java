package service;

import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.Unirest;
import com.mashape.unirest.http.exceptions.UnirestException;
import model.FileReport;
import org.apache.http.HttpStatus;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import transformer.ReportTransformer;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.List;
import java.util.Scanner;
import java.util.stream.Collectors;

public class VirusTotalService {

    private static final Logger logger = LoggerFactory.getLogger(VirusTotalService.class);

    private static final String VIRUSTOTAL_FILE_REPORT_URI = "https://www.virustotal.com/vtapi/v2/file/report";
    private static final String VIRUSTOTAL_API_KEY = getApiKey();
    private static final int MINUTE = 1000 * 60;

    private ReportTransformer reportTransformer = new ReportTransformer();

    public VirusTotalService() {
        Unirest.setObjectMapper(new json.mapper.ObjectMapper());
    }

    public FileReport getFileReport(String fileHash) {
        logger.info("Starting file report retrieval for file hash: "+ fileHash);

        HttpResponse<json.FileReport> fileReportResponse;

        try {
            fileReportResponse = Unirest.post(VIRUSTOTAL_FILE_REPORT_URI)
                    .queryString("resource", fileHash)
                    .queryString("apikey", VIRUSTOTAL_API_KEY)
                    .asObject(json.FileReport.class);
        } catch (UnirestException e) {
            logger.error("Error when requesting report from VirusTotal.", e);
            return null;
        }

        switch (fileReportResponse.getStatus()) {
            case HttpStatus.SC_NO_CONTENT:
                logger.info("Reached API limit, waiting for one minute before retrying.");
                try {
                    Thread.sleep(MINUTE);
                } catch (InterruptedException e) {
                    logger.error("Interrupted waiting to be under API limit.", e);
                }
                return getFileReport(fileHash);
            case HttpStatus.SC_FORBIDDEN:
                logger.warn("Trying to access unprivileged resource");
                return null;
        }

        logger.info("Retrieved response for file hash: " + fileHash);

        return reportTransformer.transformFileReport(fileReportResponse.getBody());
    }

    public List<FileReport> getFileReports(List<String> fileHashes) {
        return fileHashes.stream().map(this::getFileReport).collect(Collectors.toList());
    }

    private static String getApiKey() {
        try {
            return new Scanner(new File("api.key")).next();
        } catch (FileNotFoundException e) {
            logger.error("Could not find API key in \"api.key\".");
            throw new RuntimeException(e);
        }
    }

}
