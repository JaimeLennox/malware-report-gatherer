package service;

import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.Unirest;
import com.mashape.unirest.http.exceptions.UnirestException;
import json.mapper.ObjectMapper;
import model.FileReport;
import model.ScanRequest;
import org.apache.http.HttpEntity;
import org.apache.http.HttpStatus;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import transformer.VirusTotalTransformer;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Scanner;

public class VirusTotalService {

    private static final Logger logger = LoggerFactory.getLogger(VirusTotalService.class);

    private static final String VIRUSTOTAL_FILE_REPORT_URI = "http://www.virustotal.com/vtapi/v2/file/report";
    private static final String VIRUSTOTAL_FILE_SCAN_URI = "http://www.virustotal.com/vtapi/v2/file/scan";
    private static final String VIRUSTOTAL_API_KEY = getApiKey();
    private static final int MINUTE = 1000 * 60;

    private VirusTotalTransformer transformer = new VirusTotalTransformer();

    public VirusTotalService() {
        Unirest.setObjectMapper(new json.mapper.ObjectMapper());
    }

    public FileReport getFileReport(String fileHash) throws InterruptedException {
        logger.info("Starting file report retrieval for file hash: "+ fileHash);

        HttpResponse<json.virustotal.FileReport> fileReportResponse;

        try {
            fileReportResponse = Unirest.post(VIRUSTOTAL_FILE_REPORT_URI)
                    .queryString("resource", fileHash)
                    .queryString("apikey", VIRUSTOTAL_API_KEY)
                    .asObject(json.virustotal.FileReport.class);
        } catch (UnirestException e) {
            logger.error("Error when requesting report from VirusTotal.", e);
            return null;
        }

        switch (fileReportResponse.getStatus()) {
            case HttpStatus.SC_NO_CONTENT:
                logger.info("Reached API limit, waiting for one minute before retrying.");
                Thread.sleep(MINUTE);
                return getFileReport(fileHash);
            case HttpStatus.SC_FORBIDDEN:
                logger.warn("Trying to access unprivileged resource.");
                return null;
        }

        logger.info("Retrieved response for file hash: " + fileHash);

        if (fileReportResponse.getBody().getResponse_code() == 0) {
            logger.warn("No reports found for file hash: " + fileHash);
            fileReportResponse.getBody().setMd5(fileHash);
        }

        return transformer.transformFileReport(fileReportResponse.getBody());
    }

    public ScanRequest getScanRequest(File file) throws InterruptedException {
        logger.info("Starting scan request retrieval for file: " + file.getName());

        CloseableHttpResponse scanRequestResponse;

        try {
            HttpPost post = new HttpPost(VIRUSTOTAL_FILE_SCAN_URI);

            MultipartEntityBuilder builder = MultipartEntityBuilder.create();
            builder.addTextBody("apikey",VIRUSTOTAL_API_KEY);
            builder.addBinaryBody("file", file);

            post.setEntity(builder.build());

            CloseableHttpClient client = HttpClients.createDefault();

            scanRequestResponse = client.execute(post);

        } catch (IOException e) {
            logger.error("Error when requesting scan from VirusTotal.", e);
            return null;
        }

        switch (scanRequestResponse.getStatusLine().getStatusCode()) {
            case HttpStatus.SC_NO_CONTENT:
                logger.info("Reached API limit, waiting one minue before retrying");
                Thread.sleep(MINUTE);
                return getScanRequest(file);
            case HttpStatus.SC_FORBIDDEN:
                logger.warn("Trying to access unprivileged resource.");
                return null;
        }

        logger.info("Retrieved response for file: " + file.getName());

        json.virustotal.ScanRequest scanRequest;

        try {
            scanRequest = new ObjectMapper().readValue(EntityUtils.toString(scanRequestResponse.getEntity()), json.virustotal.ScanRequest.class);
        } catch (IOException e) {
            logger.error("Error converting response to scan request.", e);
            return null;
        }

        return transformer.transformScanRequest(scanRequest);
    }

    private static String getApiKey() {
        try {
            return new Scanner(new File("api.key")).next();
        } catch (FileNotFoundException e) {
            logger.error("Could not find API key in \"api.key\".");
            throw new RuntimeException(e);
        }
    }

}
