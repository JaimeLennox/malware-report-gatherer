package facade;

import model.FileReport;
import model.MessageResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import service.CouchDbService;
import service.VirusTotalService;

import javax.inject.Singleton;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.stream.Collectors;

@Path("gatherer")
@Singleton
public class ReportGatherer {

    private static final Logger logger = LoggerFactory.getLogger(ReportGatherer.class);

    private VirusTotalService virusTotalService = new VirusTotalService();
    private ExecutorService taskExecutor;

    @GET
    @Path("start/{dbname}/{dirPath}")
    @Produces(MediaType.APPLICATION_JSON)
    public Response startGathering(
            @PathParam("dbname") final String databaseName,
            @PathParam("dirPath") final String malwareDirPath
    ) {
        final String message = "Started gathering reports for '" + malwareDirPath + "' in DB '" + databaseName + "'";
        logger.info(message);

        CouchDbService couchDbService = new CouchDbService(databaseName);

        List<String> fileHashes;

        try {
            fileHashes = getFileHashes(malwareDirPath);
        } catch (IOException e) {
            logger.error("Couldn't retrieve files in directory: " + malwareDirPath, e);
            return Response.status(Response.Status.NOT_FOUND).entity(new MessageResponse(
                    Response.Status.NOT_FOUND.getStatusCode(),
                    "Couldn't access directory \"" + malwareDirPath + "\""
            )).build();
        }

        startExecutor();

        fileHashes.forEach(fileHash -> taskExecutor.submit((Runnable) () -> {
            if (couchDbService.containsFileReport(fileHash)) {
                logger.info("Database already contains document for file: " + fileHash);
            }
            else {
                FileReport fileReport;
                try {
                    fileReport = virusTotalService.getFileReport(fileHash);
                } catch (InterruptedException e) {
                    logger.warn("File report retrieval interrupted for file: " + fileHash);
                    return;
                }
                logger.info("Retrieved: " + fileReport);
                couchDbService.addFileReport(fileReport);
            }
        }));


        return Response.ok(new MessageResponse(Response.Status.OK.getStatusCode(), message)).build();
    }

    @GET
    @Path("stop")
    @Produces(MediaType.APPLICATION_JSON)
    public Response stopGathering() {
        logger.info("Stopping task executor.");
        taskExecutor.shutdownNow();
        return Response.ok(new MessageResponse(
                Response.Status.OK.getStatusCode(),
                "Stopping task executor"
        )).build();
    }

    @GET
    @Path("report/{hash}")
    @Produces(MediaType.APPLICATION_JSON)
    public FileReport getFileReport(
            @PathParam("hash") String hash
    ) throws InterruptedException {
        return virusTotalService.getFileReport(hash);
    }

    private List<String> getFileHashes(final String malwareDirPath) throws IOException {
        return Files.list(Paths.get(malwareDirPath)).map(p -> p.getFileName().toString()).collect(Collectors.toList());
    }

    private void startExecutor() {
        if (taskExecutor == null || taskExecutor.isShutdown()) {
            logger.info("Starting new task executor.");
            taskExecutor = Executors.newSingleThreadExecutor();
        }
    }

}
